#+title: Nix on MacOS: Instructions

* Installation

** Running the downloaded binary

From [[https://nixos.org/download.html#nix-install-macos][the download page]] (the "multiuser installation"):

#+begin_src sh
  sh <(curl -L https://nixos.org/nix/install)
#+end_src

The shell script downloads and runs a binary installer which will ask
you for sudo permissions. It's pretty verbose about what it's
doing. The main challenge it needs to overcome is creating a ~/nix~
directory at the root of the filesystem. On current macOS, ~/~ is
read-only, not even writeable by root. So the Nix installer needs to
create a new Apple Filesystem (APFS) volume. It also updates (in fact,
creates) ~/etc/synthetic.conf~ and ~/etc/fstab~. Finally there's a
LaunchDaemon to ensure this volume gets mounted early on during boot
up.

** Where is Nix?

Nix puts *all* packages in ~/nix~. In particular, each package is in
its own subdirectory of ~/nix/store~ (the name of which is a hash of
its contents), and these are accessed by symlinks (often chains of
symlinks) in ~/nix/var~. If the package itself needs files from other
packages at runtime, the directory names of those dependent packages
were hard-coded during the build process. The contents of these
package directories never change after they are created. If a new
version of the package is installed, a new directory is created with a
different hash in the name; the old one is not over-written.  

The user’s shell also needs to be able to find binaries. An
“environment” is a directory in ~/nix/store~ containing (at least) a
~bin~ directory (and maybe other things). That ~bin~ directory
contains symlinks to the actual binaries (in their respective
directories within the Nix store). If you install a new package, its
binary is /not/ added to that environment: store directories are
immutable! Instead, a new directory is created with symlinks to the
existing and the new binaries.

How does the shell find the environment? Well, by following ~$PATH~,
obviously, which contains a special “profile” directory. A “profile”
is a directory that is a symlink to an environment. Profiles are /not/
in the Nix store. On my machine, my profile is
~~/.nix-profile~. (Although there is also a fallback to
~/nix/var/nix/profiles/default~.) That is not actually a symlink to
the store, its a symlink to ~~/.local/state/nix/profiles/profile~. In
turn, that is a symlink to
~~/.local/state/nix/profiles/profile-5-link~. Which, finally, is a
symlink to a directory in the store containing symlinks to the
binaries.

The file ~profile-5-link~ is called a “generation.” Adding a new
package adds a new generation. Deleting a package does not delete the
package directory in the store! Instead, a new generation is created
without that package. (One may also roll back to a previous
generation.) Garbage collection of unreachable directories in the
store is done with ~nix store gc~.


** Fixing shell config files

Nix needs to set your ~PATH~ and ~MANPATH~, and the Nix versions of
these need to come /before/ any other versions. The Nix installer does
this by writing to files in ~/etc~. 

tbd: Do these need to be redone after OS updates?

** Updating Nix

#+begin_src sh
  sudo -i sh -c 'nix-channel --update && nix-env --install --attr nixpkgs.nix\
    && launchctl remove org.nixos.nix-daemon\
    && launchctl load /Library/LaunchDaemons/org.nixos.nix-daemon.plist'
#+end_src
Well, I'm not doing that very often.

Oh, apparently there is also
#+begin_src sh
  nix upgrade-nix
#+end_src

But I suspect neither of these update packages.

* Nixpkgs

Nix is a language and a command line tool. Nixpkgs is the set of
packages.

** The command-line tool(s)

Nix has a bit of a problem with having two ways of doing things: the
old way and the new way. As I understand it, everyone uses the new way
but unhelpfully the manual foregrounds the old way; indeed, the new
way is still labelled “experimental.”

The old way is a set of command-line tools called ~nix-repl~,
~nix-env~, and so on. The new way is a single tool, ~nix~, with
multiple subcommands, such as ~nix repl~. To enable the new way, you
should add
#+begin_src
  experimental-features = nix-command flakes
#+end_src
to ~~/.config/nix/nix.conf~.

** Installing packages

The old way used ~nix-env~ and that is still suggested by the
documentation. The new way is using ~nix profile~; once you have used
~nix profile~ the old way no longer works.

This looks verbose but it’s because everything revolves around
profiles.
#+begin_src sh
  nix profile install nixpkgs#hello
#+end_src

The form ~nixpkgs#hello~ denotes an “installable,” and the entire command
adds the installable to the current Nix profile. In this example,
~nixpkgs~ is a “flake reference” and ~hello~ is an attribute path. The
flake reference ~nixpkgs~ is looked up in the flake registery. The
registery can be listed with ~nix registry list~. In my case,
~nixpkgs~ points to ~github:NixOS/nixpkgs/nixpkgs-unstable~. (The last
part, ~nixpkgs-unstable~ actually denotes a branch.)

** Updating individual packages

I think this assumes you are using flakes and upgrades all of them:
#+begin_src sh
  nix profile upgrade
#+end_src

** Flakes




* Nix

** Glossary

- Profile ::
  tbd
- Channel ::
  tbd

** Directories and configuration files

~/nix/var/nix~


** What functions are available when?

*** ~stdenv~

Standard GNU utilities. Made available in builders by sourcing ~$out/stdenv~

*** ~builtins~

Always available. In addition, ~derivation~, ~import~, ~abort~, and
~throw~ don't need the ~builtins~ prefix.


** Useful commands

