#+title: Nix on MacOS: Instructions

* Installation

** Running the downloaded binary

From [[https://nixos.org/download.html#nix-install-macos][the download page]] (the "multiuser installation"):

#+begin_src sh
  sh <(curl -L https://nixos.org/nix/install)
#+end_src

The shell script downloads and runs a binary installer which will ask
you for sudo permissions. It's pretty verbose about what it's
doing. The main challenge it needs to overcome is creating a ~/nix~
directory at the root of the filesystem. On current macOS, ~/~ is
read-only, not even writeable by root. So the Nix installer needs to
create a new Apple Filesystem (APFS) volume. It also updates (in fact,
creates) ~/etc/synthetic.conf~ and ~/etc/fstab~. Finally there's a
LaunchDaemon to ensure this volume gets mounted early on during boot
up.

** Where is Nix?

Nix puts *everything* in ~/nix~. In particular, essentially all files
are in subdirectories of ~/nix/store~ (whose names are hashes of their
contents!), and these are accessed by symlinks (often chains of
symlinks) in ~/nix/var~.

** Fixing shell config files

Nix needs to set your ~PATH~ and ~MANPATH~, and the Nix versions of
these need to come /before/ any other versions. The Nix installer does
this by writing to files in ~/etc~. 

tbd: Do these need to be redone after OS updates?

** Updating Nix

#+begin_src sh
  sudo -i sh -c 'nix-channel --update && nix-env --install --attr nixpkgs.nix\
    && launchctl remove org.nixos.nix-daemon\
    && launchctl load /Library/LaunchDaemons/org.nixos.nix-daemon.plist'
#+end_src
Well, I'm not doing that very often.

* Nixpkgs

Nix is a language and a command line tool. Nixpkgs is the set of
packages.

** The command-line tool(s)

Nix has a bit of a problem with having two ways of doing things: the
old way and the new way. As I understand it, everyone uses the new way
but unhelpfully the manual foregrounds the old way; indeed, the new
way is still labelled “experimental.”

The old way is a set of command-line tools called ~nix-repl~,
~nix-env~, and so on. The new way is a single tool, ~nix~, with
multiple subcommands, such as ~nix repl~. To enable the new way, you
should add
#+begin_src
  experimental-features = nix-command flakes
#+end_src
to ~~/.config/nix/nix.conf~.





** Updating individual packages

tbd



* Nix

** Glossary

- Profile ::
  tbd
- Channel ::
  tbd

** Directories and configuration files

~/nix/var/nix~


** What functions are available when?

*** ~stdenv~

Standard GNU utilities. Made available in builders by sourcing ~$out/stdenv~

*** ~builtins~

Always available. In addition, ~derivation~, ~import~, ~abort~, and
~throw~ don't need the ~builtins~ prefix.


** Useful commands

